---
# tasks file for ansible-cis-ubuntu-2004
# ------------------------------------------------------------------------------

- name: "SECTION1 | 1.1.1.1 | Ensure mounting of cramfs filesystems is disabled"
  when:
    - cis_ubuntu2004_rule_1_1_1_1
  tags:
    - rule_1_1_1
    - server_l1
    - workstation_l1
  block:
      - name: "SECTION1 | 1.1.1.1 | Ensure mounting of cramfs filesystems is disabled | Edit modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/cramfs.conf
            regexp: "^(#)?install cramfs(\\s|$)"
            line: install cramfs /bin/true
            create: true

      - name: "SECTION1 | 1.1.1.1 | Ensure mounting of cramfs filesystems is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist cramfs(\\s|$)"
            line: "blacklist cramfs"
            create: true
            mode: '0600'

      - name: "SECTION1 | 1.1.1.1 | Ensure mounting of cramfs filesystems is disabled | Disable cramfs"
        community.general.modprobe:
            name: cramfs
            state: absent
        when: ansible_connection != 'docker'
  when:
      -  cis_ubuntu2004_rule_1_1_1_1
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.1.1.1
      - cramfs

- name: "SECTION1 | 1.1.1.2 | Ensure mounting of freevxfs filesystems is disabled"
  when:
    - cis_ubuntu2004_rule_1_1_1_2
  tags:
    - rule_1_1_1
    - server_l1
    - workstation_l1
  block:
      - name: "SECTION1 | 1.1.1.2 | Ensure mounting of freevxfs filesystems is disabled | Edit modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/freevxfs.conf
            regexp: "^(#)?install freevxfs(\\s|$)"
            line: install freevxfs /bin/true
            create: true

      - name: "SECTION1 | 1.1.1.2 | Ensure mounting of freevxfs filesystems is disabled | Disable freevxfs"
        community.general.modprobe:
            name: freevxfs
            state: absent
        when: ansible_connection != 'docker'

      - name: "SECTION1 | 1.1.1.2 | Ensure mounting of freevxfs filesystems is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist freevxfs(\\s|$)"
            line: "blacklist freevxfs"
            create: true
            mode: '0600'

- name: "SECTION1 | 1.1.1.3 | Ensure mounting of jffs2 filesystems is disabled"
  when:
    - cis_ubuntu2004_rule_1_1_1_3
  tags:
    - rule_1_1_1
    - server_l1
    - workstation_l1
  block:
      - name: "SECTION1 | 1.1.1.3 | Ensure mounting of jffs2 filesystems is disabled | Edit modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/jffs2.conf
            regexp: "^(#)?install jffs2(\\s|$)"
            line: install jffs2 /bin/true
            create: true

      - name: "SECTION1 | 1.1.1.3 | Ensure mounting of jffs2 filesystems is disabled | Disable jffs2"
        community.general.modprobe:
            name: jffs2
            state: absent
        when: ansible_connection != 'docker'

      - name: "SECTION1 | 1.1.1.3 | Ensure mounting of jffs2 filesystems is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist jffs2(\\s|$)"
            line: "blacklist jffs2"
            create: true
            mode: '0600'

- name: "SECTION1 | 1.1.1.4 | Ensure mounting of hfs filesystems is disabled"
  when:
    - cis_ubuntu2004_rule_1_1_1_4
  tags:
    - rule_1_1_1
    - server_l1
    - workstation_l1
  block:
      - name: "SECTION1 | 1.1.1.4 | Ensure mounting of hfs filesystems is disabled | Edit modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/hfs.conf
            regexp: "^(#)?install hfs(\\s|$)"
            line: install hfs /bin/true
            create: true

      - name: "SECTION1 | 1.1.1.4 | Ensure mounting of hfs filesystems is disabled | Disable hfs"
        community.general.modprobe:
            name: hfs
            state: absent
        when: ansible_connection != 'docker'

      - name: "SECTION1 | 1.1.1.4 | Ensure mounting of hfs filesystems is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist hfs(\\s|$)"
            line: "blacklist hfs"
            create: true
            mode: '0600'

- name: "SECTION1 | 1.1.1.5 | Ensure mounting of hfsplus filesystems is disabled"
  when:
    - cis_ubuntu2004_rule_1_1_1_5
  tags:
    - rule_1_1_1
    - server_l1
    - workstation_l1
  block:
      - name: "SECTION1 | 1.1.1.5 | Ensure mounting of hfsplus filesystems is disabled | Edit modprobe config"
        ansible.builtin.lineinfile:
          path: /etc/modprobe.d/hfsplus.conf
          regexp: "^(#)?install hfsplus(\\s|$)"
          line: install hfsplus /bin/true
          create: true

      - name: "SECTION1 | 1.1.1.5 | Ensure mounting of hfsplus filesystems is disabled | Disable hfsplus"
        community.general.modprobe:
          name: hfsplus
          state: absent
        when: ansible_connection != 'docker'

      - name: "SECTION1 | 1.1.1.5 | Ensure mounting of hfsplus filesystems is disabled | blacklist"
        ansible.builtin.lineinfile:
          path: /etc/modprobe.d/blacklist.conf
          regexp: "^(#)?blacklist hfsplus(\\s|$)"
          line: "blacklist hfsplus"
          create: true
          mode: '0600'

- name: |
    "SECTION1 | 1.1.2.1  | Ensure /tmp is a separate partition"
    "SECTION1 | 1.1.2.2  | Ensure nodev option set on /tmp partition | tmp_systemd"
    "SECTION1 | 1.1.2.3  | Ensure noexec option set on /tmp partition | tmp_systemd"
    "SECTION1 | 1.1.2.4  | Ensure nosuid option set on /tmp partition | tmp_systemd"
  ansible.builtin.template:
    src: system/tmp.mount.j2
    dest: /etc/systemd/system/tmp.mount
    owner: "{{ cis_ubuntu2004_section1_owner_default }}"
    group: "{{ cis_ubuntu2004_section1_group_default }}"
    mode: "{{ cis_ubuntu2004_section1_mode_default }}"
  notify: systemd restart and enable tmp.mount
  when:
    - cis_ubuntu2004_rule_1_1_2_1
  tags:
    - rule_1_1_2_1
    - server_l1
    - workstation_l1

# ------------------------------------------------------------------------------

- name: |
    "SECTION1 | 1.1.3.1 | Ensure separate partition exists for /var"
    "SECTION1 | 1.1.3.2 | Ensure /var partition includes the nodev option"
    "SECTION1 | 1.1.3.3 | Ensure /var partition includes the nosuid option"
  ansible.builtin.template:
    src: system/var.mount.j2
    dest: /etc/systemd/system/var.mount
    owner: "{{ cis_ubuntu2004_section1_owner_default }}"
    group: "{{ cis_ubuntu2004_section1_group_default }}"
    mode: "{{ cis_ubuntu2004_section1_mode_default }}"
  notify:
    - systemd restart and enable var.mount
  when:
    - cis_ubuntu2004_rule_1_1_3_1
  tags:
    - rule_1_1_3_1
    - server_l1
    - workstation_l1

# # ------------------------------------------------------------------------------

- name: |
    "SECTION1 | 1.1.4.1 | Ensure separate partition exists for /var/tmp"
    "SECTION1 | 1.1.4.2 | Ensure /var/tmp partition includes the nodev option"
    "SECTION1 | 1.1.4.3 | Ensure /var/tmp partition includes the noexec option"
    "SECTION1 | 1.1.4.4 | Ensure /var/tmp partition includes the nosuid option"
  ansible.builtin.template:
    src: system/var.tmp.mount.j2
    dest: /etc/systemd/system/var.tmp.mount
    owner: "{{ cis_ubuntu2004_section1_owner_default }}"
    group: "{{ cis_ubuntu2004_section1_group_default }}"
    mode: "{{ cis_ubuntu2004_section1_mode_default }}"
  notify:
    - systemd restart and enable var.tmp.mount
  when:
    - cis_ubuntu2004_rule_1_1_4_1
  tags:
    - rule_1_1_4_1
    - server_l2
    - workstation_l2

# # ------------------------------------------------------------------------------

- name: |
    "SECTION1 | 1.1.5.1 | Ensure separate partition exists for /var/log"
    "SECTION1 | 1.1.5.2 | Ensure /var/log partition includes the nodev option"
    "SECTION1 | 1.1.5.3 | Ensure /var/log partition includes the noexec option"
    "SECTION1 | 1.1.5.4 | Ensure /var/log partition includes the nosuid option"
  ansible.builtin.template:
    src: system/var.log.mount.j2
    dest: /etc/systemd/system/var.log.mount
    owner: "{{ cis_ubuntu2004_section1_owner_default }}"
    group: "{{ cis_ubuntu2004_section1_group_default }}"
    mode: "{{ cis_ubuntu2004_section1_mode_default }}"
  notify:
    - systemd restart and enable var.log.mount
  when:
    - cis_ubuntu2004_rule_1_1_5_1
  tags:
    - rule_1_1_5_1
    - server_l2
    - workstation_l2

# # ------------------------------------------------------------------------------

- name: |
    "SECTION1 | 1.1.6.1 | Ensure separate partition exists for /var/log/audit"
    "SECTION1 | 1.1.6.2 | Ensure /var/log/audit partition includes the nodev option"
    "SECTION1 | 1.1.6.3 | Ensure /var/log/audit partition includes the noexec option"
    "SECTION1 | 1.1.6.4 | Ensure /var/log/audit partition includes the nosuid option"
  ansible.builtin.template:
    src: system/var.log.audit.mount.j2
    dest: /etc/systemd/system/var.log.audit.mount
    owner: "{{ cis_ubuntu2004_section1_owner_default }}"
    group: "{{ cis_ubuntu2004_section1_group_default }}"
    mode: "{{ cis_ubuntu2004_section1_mode_default }}"
  notify:
    - systemd restart and enable var.log.audit.mount
  when:
    - cis_ubuntu2004_rule_1_1_6_1
  tags:
    - rule_1_1_6_1
    - server_l2
    - workstation_l2

# # ------------------------------------------------------------------------------

- name: |
    "SECTION1 | 1.1.7.1 | Ensure /home is a separate partition"
    "SECTION1 | 1.1.7.2 | Ensure /home partition includes the nodev option"
    "SECTION1 | 1.1.7.3 | Ensure /home partition includes the nosuid option"
  ansible.builtin.template:
    src: system/home.mount.j2
    dest: /etc/systemd/system/home.mount
    owner: "{{ cis_ubuntu2004_section1_owner_default }}"
    group: "{{ cis_ubuntu2004_section1_group_default }}"
    mode: "{{ cis_ubuntu2004_section1_mode_default }}"
  notify:
    - systemd restart and enable home.mount
  when:
    - cis_ubuntu2004_rule_1_1_7_1
  tags:
    - rule_1_1_7_1
    - server_l2
    - workstation_l2

# ------------------------------------------------------------------------------

- name: |
    "SECTION1 | 1.1.8.1 | Ensure nodev option set on /dev/shm partition"
    "SECTION1 | 1.1.8.2 | Ensure noexec option set on /dev/shm partition"
    "SECTION1 | 1.1.8.3 | Ensure nosuid option set on /dev/shm partition"
  ansible.posix.mount:
    name: /dev/shm
    src: tmpfs
    state: mounted
    fstype: tmpfs
    opts: "defaults,rw,relatime,size=2G,nodev,nosuid,noexec"
  when:
    - cis_ubuntu2204_rule_1_1_8_1
  tags:
    - rule_1_1_8_1
    - server_l1
    - workstation_l1

# ------------------------------------------------------------------------------

- name: "SECTION | 1.1.9 | Disable Automounting"
  ansible.builtin.service:
      name: autofs
      state: stopped
      enabled: false
  when:
      - cis_ubuntu2004_rule_1_1_9
      #-  cis_ubuntu2004_autofs_service_status.stdout == "loaded"
      #- not  cis_ubuntu2004_allow_autofs
  tags:
    - rule_1_1_9
    - server_l1
    - workstation_l1

# ------------------------------------------------------------------------------

- name: "SECTION1 | 1.1.10 | Disable USB Storage"
  when:
    - cis_ubuntu2004_rule_1_1_10
  tags:
    - rule_1_1_1
    - server_l2
    - workstation_l2
  block:
      - name: "SECTION1 | 1.1.10 | Disable USB Storage | Set modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/usb_storage.conf
            regexp: '^install usb-storage'
            line: 'install usb-storage /bin/true'
            create: true

      - name: "SECTION1 | 1.1.10 | Disable USB Storage | Remove usb-storage module"
        community.general.modprobe:
            name: usb-storage
            state: absent
        when: ansible_connection != 'docker'

      - name: "SECTION1 | 1.1.10 | Disable USB Storage | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: '^blacklist usb-storage'
            line: 'blacklist usb-storage'
            create: true

# ------------------------------------------------------------------------------

- name: "SECTION | 1.2.1 | Ensure AIDE is installed"
  block:
      - name: "SECTION1 | 1.2.1 | Ensure AIDE is installed"
        ansible.builtin.package:
            name: ['aide', 'aide-common']
            state: present
            update_cache: true

      - name: "SECTION1 | 1.2.1 | Ensure AIDE is installed | Recapture packages"
        ansible.builtin.package_facts:
            manager: auto

      - name: "SECTION1 | 1.2.1 | Ensure AIDE is installed | Configure AIDE"
        ansible.builtin.shell: aide init && mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
        args:
            creates: /var/lib/aide/aide.db
        changed_when: false
        failed_when: false
        async: 45
        poll: 0
        when: not ansible_check_mode
  when:
      - cis_ubuntu2004_rule_1_2_1
      #-  cis_ubuntu2004_rule_1_2_1
      #-  cis_ubuntu2004_config_aide
      - "'aide' not in ansible_facts.packages or
        'aide-common' not in ansible_facts.packages"
  tags:
      #- level1-server
      #- level1-workstation
      #- automated
      #- patch
      #- aide
      - rule_1_2_1
      - server_l1 
      - workstation_l1

- name: "SECTION | 1.2.2 | Ensure filesystem integrity is regularly checked"
  ansible.builtin.cron:
      name: Run AIDE integrity check
      cron_file: "{{  cis_ubuntu2004_aide_cron['cron_file'] }}"
      user: "{{  cis_ubuntu2004_aide_cron['cron_user'] }}"
      minute: "{{  cis_ubuntu2004_aide_cron['aide_minute'] | default('0') }}"
      hour: "{{  cis_ubuntu2004_aide_cron['aide_hour'] | default('5') }}"
      day: "{{  cis_ubuntu2004_aide_cron['aide_day'] | default('*') }}"
      month: "{{  cis_ubuntu2004_aide_cron['aide_month'] | default('*') }}"
      weekday: "{{  cis_ubuntu2004_aide_cron['aide_weekday'] | default('*') }}"
      job: "{{  cis_ubuntu2004_aide_cron['aide_job'] }}"
  when:
      - cis_ubuntu2004_rule_1_2_2
      #-  cis_ubuntu2004_config_aide
      #-  cis_ubuntu2004_rule_1_2_2
  tags:
      #- level1-server
      #- level1-workstation
      #- automated
      #- patch
      - rule_1.2.2
      - server_l1 
      - workstation_l1
      #- cron

# ------------------------------------------------------------------------------

- name: "SECTION | 1.3.1 |  Ensure updates, patches, and additional security software are installed"
  ansible.builtin.package:
      name: "*"
      state: latest
  when:
      #-  cis_ubuntu2004_rule_1_3_1
      - cis_ubuntu2004_rule_1_3_1
  tags:
      #- level1-server
      #- level1-workstation
      #- manual
      #- audit
      - rule_1.3.1
      - server_l1 
      - workstation_l1
      #- apt

- name: "SECTION | 1.3.2 | Ensure package manager repositories are configured"
  block:
      - name: "SECTION | 1.3.2 | Ensure package manager repositories are configured | Get repositories"
        ansible.builtin.shell: apt-cache policy
        changed_when: false
        failed_when: false
        check_mode: false
        register:  cis_ubuntu2004_1_3_2_apt_policy

      - name: "SECTION | 1.3.2 | Ensure package manager repositories are configured | Message out repository configs"
        ansible.builtin.debug:
            msg:
                - "Warning!!  Below are the apt package repositories"
                - "Please review to make sure they conform to your sites policies"
                - "{{  cis_ubuntu2004_1_3_2_apt_policy.stdout_lines }}"

      - name: "SECTION | 1.3.2 | Ensure package manager repositories are configured | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.3.2'
  when:
      #-  cis_ubuntu2004_rule_1_3_2
      - cis_ubuntu2004_rule_1_3_2
  tags:
      #- level1-server
      #- level1-workstation
      #- manual
      #- audit
      - rule_1.3.2
      - server_l1 
      - workstation_l1
      #- apt

- name: "SECTION | 1.3.3 | AUDIT | Ensure GPG keys are configured"
  block:
      - name: "SECTION | 1.3.3 | AUDIT | Ensure GPG keys are configured | Get apt gpg keys"
        ansible.builtin.shell: apt-key list
        changed_when: false
        failed_when: false
        check_mode: false
        register: cis_ubuntu2004_1_3_3_apt_gpgkeys

      - name: "SECTION | 1.3.3 | AUDIT | Ensure GPG keys are configured | Message out apt gpg keys"
        ansible.builtin.debug:
            msg:
                - "Warning!!  Below are the apt gpg keys configured"
                - "Please review to make sure they are configured"
                - "in accordance with site policy"
                - "{{ cis_ubuntu2004_1_3_3_apt_gpgkeys.stdout_lines }}"

      - name: "SECTION | 1.3.3 | AUDIT | Ensure GPG keys are configured | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.3.3'
  when:
      #-  cis_ubuntu2004_rule_1_3_3
      - cis_ubuntu2004_rule_1_3_3
  tags:
      #- level1-server
      #- level1-workstation
      #- manual
      #- audit
      - rule_1.3.3
      #- gpg
      #- keys
      - server_l1 
      - workstation_l1

# ------------------------------------------------------------------------------

- name: "SECTION1 | 1.4.1 | Ensure bootloader password is set"
  when:
    - cis_ubuntu2004_rule_1_4_1
    - cis_ubuntu2004_set_boot_pass
  tags:
    - rule_1_4
    - server_l1
    - workstation_l1
    - molecule-idempotence-notest
  block:
    - name: "SECTION1 | 1.4.1 | Ensure bootloader password is set | generate password"
      ansible.builtin.shell: |
        set -o pipefail &&
          if [ '{{ cis_ubuntu2004_bootloader_password }}' == 'random' ]; then
            PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c12)
          else
            PASSWORD='{{ cis_ubuntu2004_bootloader_password }}'
          fi
        echo -e "$PASSWORD\n$PASSWORD" | grub-mkpasswd-pbkdf2 --iteration-count=600000 --salt=64 | awk '/grub.pbkdf/{print$NF}'
      register: cis_ubuntu2004_grub_bootloader_password
      args:
        executable: "{{ cis_ubuntu2004_shell_executable }}"
      changed_when: false

    - name: "SECTION1 | 1.4.1 | Ensure bootloader password is set | generate config"
      ansible.builtin.copy:
        dest: /etc/grub.d/00_password
        content: "cat << EOF\nexec tail -n +2 $0\nset superusers=\"root\"\npassword_pbkdf2 root {{ cis_ubuntu2004_grub_bootloader_password.stdout }}\nEOF"
        owner: "{{ cis_ubuntu2004_section1_owner_default }}"
        group: "{{ cis_ubuntu2004_section1_group_default }}"
        mode: "{{ cis_ubuntu2004_section1_mode_etc_grub_d }}"
      notify: generate new grub config
      when:
        - cis_ubuntu2004_grub_bootloader_password is defined
        - cis_ubuntu2004_grub_bootloader_password.stdout is defined
        - cis_ubuntu2004_grub_bootloader_password.stdout | length > 0

    - name: "SECTION1 | 1.4.1 | Ensure bootloader password is set | disable password for system boot"
      ansible.builtin.replace:
        path: /etc/grub.d/10_linux
        regexp: '--class os"'
        replace: '--class os --unrestricted"'
      notify: generate new grub config
      when:
        - cis_ubuntu2004_disable_boot_pass

- name: "SECTION1 | 1.4.2 | Ensure permissions on bootloader config are configured"
  block:
      - name: "SECTION1 | 1.4.2 | AUDIT | Ensure permissions on bootloader config are configured | Check for Grub file"
        ansible.builtin.stat:
            path: "{{ cis_ubuntu2004_grub_user_file }}"
        check_mode: false
        register: cis_ubuntu2004_1_4_2_grub_cfg_status

      - name: "SECTION1 | 1.4.2 | Ensure permissions on bootloader config are configured | Set permissions"
        ansible.builtin.file:
            path: "{{ cis_ubuntu2004_grub_user_file }}"
            owner: "{{ cis_ubuntu2204_section1_owner_default }}"
            group: "{{ cis_ubuntu2204_section1_group_default }}"
            mode: 0600
        when:
            - cis_ubuntu2004_1_4_2_grub_cfg_status.stat.exists
            - cis_ubuntu2004_1_4_2_grub_cfg_status.stat.mode != "0400"
  when:
      #-  cis_ubuntu2004_rule_1_4_2
      - cis_ubuntu2004_1_4_2
  tags:
      #- level1-server
      #- level1-workstation
      #- automated
      #- patch
      - rule_1.4.2
      - server_l1
      - workstation_l1
      #- grub

- name: "SECTION1 | 1.4.3 | Ensure authentication required for single user mode"
  when:
    - cis_ubuntu2004_rule_1_4_3
    - cis_ubuntu2004_set_grub_user_password
  tags:
    - level1-server
    - level1-workstation
    - automated
    - patch
    - rule_1.4.3
    - passwd
  block:
    - name: "SECTION1 | 1.4.3 | Get current root password hash from /etc/shadow"
      ansible.builtin.command: "awk -F: '$1 == \"root\" { print $2 }' /etc/shadow"
      register: root_shadow_password
      changed_when: false
      check_mode: false

    - name: "SECTION1 | 1.4.3 | Set root password if non-compliant with CIS hash policy"
      ansible.builtin.user:
        name: "{{ cis_ubuntu2004_section1_owner_default }}"
        password: "{{ cis_ubuntu2004_grub_user_passwd }}"
      when:
        - root_shadow_password.stdout is defined
        - root_shadow_password.stdout | regex_search('^\$(y|5|6|g)') is not defined

# ------------------------------------------------------------------------------

- name: "SECTION1 | 1.5.1 | Ensure prelink is not installed"
  block:
      - name: "SECTION1 | 1.5.1 | Ensure prelink is not installed | Restore binaries to normal"
        ansible.builtin.shell: prelink -ua
        changed_when: false
        failed_when: false

      - name: "SECTION1 | 1.5.1 | Ensure prelink is not installed| Remove prelink package"
        ansible.builtin.package:
            name: prelink
            state: absent
  when:
      - cis_ubuntu2004_rule_1_5_1
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.5.1
      - prelink

- name: "SECTION1 | 1.5.2 | Ensure address space layout randomization (ASLR) is enabled | Set active kernel parameter"
  ansible.posix.sysctl:
      name: kernel.randomize_va_space
      value: '2'
  when:
      -  cis_ubuntu2004_rule_1_5_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.5.2
      - aslr

- name: "SECTION1 | 1.5.3 | Ensure ptrace_scope is restricted | sysctl.conf"
  ansible.builtin.lineinfile:
      path: /etc/sysctl.d/60-kernel_sysctl.conf
      regexp: '^kernel.yama.ptrace_scope '
      line: kernel.yama.ptrace_scope=1
      create: true
      owner: root
      group: root
      mode: '0644'
  when:
      -  cis_ubuntu2004_rule_1_5_3
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.5.3

- name: "SECTION1 | 1.5.4 | Ensure Automatic Error Reporting is not enabled"
  block:
      - name: "SECTION1 | 1.5.4 | Ensure Automatic Error Reporting is not enabled | disable"
        ansible.builtin.lineinfile:
            path: /etc/default/apport
            regexp: ^enabled
            line: enabled=0
            create: true
            owner: root
            group: root
            mode: 0644

      - name: "SECTION1 | 1.5.4 | Ensure Automatic Error Reporting is not enabled | stop service"
        ansible.builtin.systemd:
            name: apport
            state: stopped
            enabled: false
        when:
            - "'apport' in ansible_facts.packages"

      - name: "SECTION1 | 1.5.4 | Ensure Automatic Error Reporting is not enabled | remove package"
        ansible.builtin.package:
            name: apport
            state: absent
        when:
            - "'apport' in ansible_facts.packages"
  when:
      -  cis_ubuntu2004_rule_1_5_4
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.5.4
      - apport

- name: "SECTION1 | 1.5.5 | Ensure core dumps are restricted"
  block:
      - name: "1.5.5 | Ensure core dumps are restricted | kernel sysctl"
        ansible.posix.sysctl:
            name: fs.suid_dumpable
            value: '0'
            state: present
            reload: true
            sysctl_set: true
            ignoreerrors: true

      - name: "SECTION1 | 1.5.5 | Ensure core dumps are restricted | security limits"
        ansible.builtin.lineinfile:
            path: /etc/security/limits.d/99_zero_core.conf
            regexp: '^\* hard core'
            line: '* hard core 0'
            create: true
            owner: root
            group: root
            mode: '0644'

      - name: "SECTION1 | 1.5.5 | Ensure core dumps are restricted | sysctl.conf"
        ansible.builtin.lineinfile:
            path: /etc/sysctl.conf
            regexp: '^fs.suid_dumpable'
            line: fs.suid_dumpable=0
            owner: root
            group: root
            mode: '0644'

      - name: "SECTION1 | 1.5.5 | Ensure core dumps are restricted | coredump.conf"
        ansible.builtin.lineinfile:
            path: /etc/systemd/coredump.conf
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            create: true
            owner: root
            group: root
            mode: '0644'
        loop:
            - { regexp: '^Storage', line: 'Storage=none' }
            - { regexp: '^ProcessSizeMax', line: 'ProcessSizeMax=0' }
        when: "'systemd-coredump' in ansible_facts.packages"
  when:
      -  cis_ubuntu2004_rule_1_5_5
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.5.5
      - coredump
      
# ------------------------------------------------------------------------------

- name: "SECTION1 | 1.6.1.1 | Ensure AppArmor is installed"
  ansible.builtin.package:
      name: ['apparmor', 'apparmor-utils']
      state: present
  when:
      -  cis_ubuntu2004_rule_1_6_1_1
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.6.1.1
      - apparmor

- name: "SECTION1 | 1.6.1.2 | Ensure AppArmor is enabled in the bootloader configuration"
  block:
      - name: "SECTION1 | 1.6.1.2 | AUDIT | Ensure AppArmor is enabled in the bootloader configuration | Get current settings"
        ansible.builtin.shell: grep "GRUB_CMDLINE_LINUX=" /etc/default/grub | cut -f2 -d'"'
        changed_when: false
        failed_when: false
        check_mode: false
        register:  cis_ubuntu2004_1_6_1_2_cmdline_settings

      - name: "SECTION1 | 1.6.1.2 | Ensure AppArmor is enabled in the bootloader configuration | Set apparmor settings if none exist"
        ansible.builtin.lineinfile:
            path: /etc/default/grub
            regexp: '^GRUB_CMDLINE_LINUX'
            line: 'GRUB_CMDLINE_LINUX="apparmor=1 security=apparmor {{  cis_ubuntu2004_1_6_1_2_cmdline_settings.stdout }}"'
            insertafter: '^GRUB_'
        notify: Grub update
        when:
            - "'apparmor' not in  cis_ubuntu2004_1_6_1_2_cmdline_settings.stdout"
            - "'security' not in  cis_ubuntu2004_1_6_1_2_cmdline_settings.stdout"

      - name: "SECTION1 | 1.6.1.2 | Ensure AppArmor is enabled in the bootloader configuration | Set apparmor settings if none exist | Replace apparmor settings when exists"
        ansible.builtin.replace:
            path: /etc/default/grub
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
        with_items:
            - { regexp: 'apparmor=[^\s"]+', replace: 'apparmor=1' }
            - { regexp: 'security=[^\s"]+', replace: 'security=apparmor' }
        when:
            - "'apparmor' in  cis_ubuntu2004_1_6_1_2_cmdline_settings.stdout"
            - "'security' in  cis_ubuntu2004_1_6_1_2_cmdline_settings.stdout"
        notify: Grub update
  when:
      -  cis_ubuntu2004_rule_1_6_1_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.6.1.2
      - apparmor

# Any unconfined processes may need to have a profile created or activated for them and then be restarted So manual task
- name: "SECTION1 | 1.6.1.3 | Ensure all AppArmor Profiles are in enforce or complain mode"
  block:
      - name: "SECTION1 | 1.6.1.3 | AUDIT | Ensure all AppArmor Profiles are in enforce or complain mode | capture state"
        ansible.builtin.shell: apparmor_status | grep "processes.*unconfined" | awk '{ print $1 }'
        changed_when: false
        failed_when: false
        register:  cis_ubuntu2004_rule_1_6_1_3_apparmor_unconfined

      - name: "SECTION1 | 1.6.1.3 | AUDIT | Ensure all AppArmor Profiles are in enforce or complain mode | Warning"
        ansible.builtin.debug:
            msg: "Warning!! AppArmor mode needs to be confirmed | Any unconfined processes may need to have a profile created"
        when:  cis_ubuntu2004_rule_1_6_1_3_apparmor_unconfined.stdout != '0'

      - name: "SECTION1 | 1.6.1.3 | AUDIT | Ensure all AppArmor Profiles are in enforce or complain mode | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when:  cis_ubuntu2004_rule_1_6_1_3_apparmor_unconfined.stdout != '0'
  vars:
      warn_control_id: '1.6.1.3'
  when:
      -  cis_ubuntu2004_rule_1_6_1_3
  tags:
      - level1-server
      - level1-workstation
      - manual
      - patch
      - rule_1.6.1.3
      - apparmor

# These tasks can be forced to run but some apps may not have profiles associated so this will need to be manual task
- name: "SECTION1 | 1.6.1.4 | Ensure all AppArmor Profiles are enforcing"
  block:
      - name: "SECTION1 | 1.6.1.4 | AUDIT | Ensure all AppArmor Profiles are enforcing | capture state"
        ansible.builtin.shell: apparmor_status | grep -E "processes.*complain" | awk '{ print $1 }'
        changed_when: false
        failed_when: false
        register:  cis_ubuntu2004_rule_1_6_1_4_apparmor_enforced

      - name: "SECTION1 | 1.6.1.4 | AUDIT | Ensure all AppArmor Profiles are enforcing | Warning"
        ansible.builtin.debug:
            msg: "Warning!! AppArmor mode is not in enforcing | Any unconfined processes may need to have a profile created"
        when:  cis_ubuntu2004_rule_1_6_1_4_apparmor_enforced.stdout != '0'

      - name: "SECTION1 | 1.6.1.4 | AUDIT | Ensure all AppArmor Profiles are enforcing | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when:  cis_ubuntu2004_rule_1_6_1_4_apparmor_enforced.stdout != '0'

  vars:
      warn_control_id: '1.6.1.4'
  when:
      -  cis_ubuntu2004_rule_1_6_1_4
  tags:
      - level2-server
      - level2-workstation
      - automated
      - scored
      - patch
      - rule_1.6.1.4
      - apparmor
           
# ------------------------------------------------------------------------------

- name: "SECTION1 | 1.7.1 | Ensure message of the day is configured properly"
  block:
      - name: "SECTION1 | 1.7.1 | Ensure message of the day is configured properly | motd"
        ansible.builtin.template:
            src: etc/motd.j2
            dest: /etc/motd

      - name: "SECTION1 | 1.7.1 | Ensure message of the day is configured properly | disable dynamic_motd"
        ansible.builtin.lineinfile:
            path: /etc/pam.d/sshd
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
        loop:
            - { regexp: 'session\s+optional\s+pam_motd.so\s+motd=/run/motd.dynamic', line: '# 1\' }
            - { regexp: 'session\s+optional\s+pam_motd.so noupdate', line: '# 1\' }
            - { regexp: '# Pam_motd.so diabled for CIS benchmark', line: '# Pam_motd.so diabled for CIS benchmark' }
        when:  cis_ubuntu2004_disable_dynamic_motd
  when:
      -  cis_ubuntu2004_rule_1_7_1
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.7.1
      - motd

- name: "SECTION1 | 1.7.2 | Ensure local login warning banner is configured properly"
  ansible.builtin.template:
      src: etc/issue.j2
      dest: /etc/issue
  when:
      -  cis_ubuntu2004_rule_1_7_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.7.2
      - banner

- name: "SECTION1 | 1.7.3 | Ensure remote login warning banner is configured properly"
  ansible.builtin.template:
      src: etc/issue.net.j2
      dest: /etc/issue.net
  when:
      -  cis_ubuntu2004_rule_1_7_3
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.7.3
      - banner

- name: "SECTION1 | 1.7.4 | Ensure permissions on /etc/motd are configured"
  ansible.builtin.file:
      path: /etc/motd
      owner: root
      group: root
      mode: 0644
  when:
      -  cis_ubuntu2004_rule_1_7_4
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.7.4
      - permissions
      - motd

- name: "SECTION1 | 1.7.5 | Ensure permissions on /etc/issue are configured"
  ansible.builtin.file:
      path: /etc/issue
      owner: root
      group: root
      mode: 0644
  when:
      -  cis_ubuntu2004_rule_1_7_5
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.7.5
      - permissions
      - banner

- name: "SECTION1 | 1.7.6 | Ensure permissions on /etc/issue.net are configured"
  ansible.builtin.file:
      path: /etc/issue.net
      owner: root
      group: root
      mode: 0644
  when:
      -  cis_ubuntu2004_rule_1_7_6
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.7.6
      - permissions
      - banner
           
# ------------------------------------------------------------------------------

- name: "SECTION1 | 1.8.1 | Ensure GNOME Display Manager is removed"
  ansible.builtin.package:
      name: gdm3
      state: absent
  when:
      -  cis_ubuntu2004_rule_1_8_1
      - not  cis_ubuntu2004_desktop_required
      -  cis_ubuntu2004_disruption_high
      - "'gdm3' in ansible_facts.packages"
  tags:
      - level2-server
      - manual
      - patch
      - rule_1.8.1
      - gnome

- name: "SECTION1 | 1.8.2 | Ensure GDM login banner is configured"
  ansible.builtin.lineinfile:
      path: /etc/gdm3/greeter.dconf-defaults
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      insertafter: "{{ item.insertafter }}"
      create: true
      owner: root
      group: root
      mode: 0644
  notify: Update dconf
  with_items:
      - { regexp: '\[org\/gnome\/login-screen\]', line: '[org/gnome/login-screen]', insertafter: EOF }
      - { regexp: 'banner-message-enable', line: 'banner-message-enable=true', insertafter: '\[org\/gnome\/login-screen\]'}
      - { regexp: 'banner-message-text', line: "banner-message-text='{{  cis_ubuntu2004_warning_banner | regex_replace('\n', ' ') | trim }}'", insertafter: 'banner-message-enable' }
  when:
      -  cis_ubuntu2004_rule_1_8_2
      -  cis_ubuntu2004_desktop_required
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.8.2
      - gnome

- name: "SECTION1 | 1.8.3 | Ensure disable-user-list is enabled"
  ansible.builtin.lineinfile:
      path: /etc/gdm3/greeter.dconf-default
      regexp: '^disable-user-list='
      line: 'disable-user-list=true'
      insertafter: 'banner-message-text='
      create: true
      owner: root
      group: root
      mode: 0644
  notify: Update dconf
  when:
      -  cis_ubuntu2004_rule_1_8_3
      -  cis_ubuntu2004_desktop_required
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.8.3
      - gnome

- name: "SECTION1 | 1.8.4 | Ensure GDM screen locks when the user is idle"
  block:
      - name: "SECTION1 | 1.8.4 | Ensure GDM screen locks when the user is idle | session profile"
        ansible.builtin.lineinfile:
            path: /etc/dconf/profile/session
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "{{ item.after | default(omit) }}"
            loop:
                - "{ regexp: 'user-db: user', line: 'user' }"
                - "{ regexp: 'system-db: {{  cis_ubuntu2004_dconf_db_name }}'', after: '^user-db.*' }"

      - name: "SECTION1 | 1.8.4 | Ensure GDM screen locks when the user is idle | make directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d"
            owner: root
            group: root
            mode: 0755
            state: directory
        notify: Update dconf

      - name: "SECTION1 | 1.8.4 | Ensure GDM screen locks when the user is idle | session script"
        ansible.builtin.template:
            src: etc/dconf/db/00-screensaver.j2
            dest: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d/00-screensaver"
            owner: root
            group: root
            mode: '0644'
        notify: Update dconf
  when:
      -  cis_ubuntu2004_rule_1_8_4
      -  cis_ubuntu2004_desktop_required
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.8.4
      - gnome

- name: "SECTION1 | 1.8.5 | Ensure GDM screen locks cannot be overridden"
  block:
      - name: "SECTION1 | 1.8.5 | Ensure GDM screen locks cannot be overridden | make lock directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d/locks"
            owner: root
            group: root
            mode: 0755
            state: directory
        notify: Update dconf

      - name: "SECTION1 | 1.8.5 | Ensure GDM screen locks cannot be overridden | make lockfile"
        ansible.builtin.template:
            src: etc/dconf/db/00-screensaver_lock.j2
            dest: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d/locks/00-screensaver"
            owner: root
            group: root
            mode: 0644
        notify: Update dconf
  when:
      -  cis_ubuntu2004_rule_1_8_5
      -  cis_ubuntu2004_desktop_required
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.8.5
      - gnome

- name: "SECTION1 | 1.8.6 | Ensure GDM automatic mounting of removable media is disabled"
  block:
      - name: "SECTION1 | 1.8.6 | Ensure GDM automatic mounting of removable media is disabled | make directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d"
            owner: root
            group: root
            mode: 0755
            state: directory
        notify: Update dconf

      - name: "SECTION1 | 1.8.6 | Ensure GDM automatic mounting of removable media is disabled | session script"
        ansible.builtin.template:
            src: etc/dconf/db/00-media-automount.j2
            dest: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d/00-media-automount"
            owner: root
            group: root
            mode: '0644'
        notify: Update dconf
  when:
      -  cis_ubuntu2004_rule_1_8_6
      -  cis_ubuntu2004_desktop_required
  tags:
      - level1-server
      - level2-workstation
      - automated
      - patch
      - rule_1.8.6
      - gnome

- name: "SECTION1 | 1.8.7 | Ensure GDM disabling automatic mounting of removable media is not overridden"
  block:
      - name: "SECTION1 | 1.8.7 | Ensure GDM disabling automatic mounting of removable media is not overridden | make lock directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d/locks"
            owner: root
            group: root
            mode: 0755
            state: directory
        notify: Update dconf

      - name: "SECTION1 | 1.8.7 | Ensure GDM disabling automatic mounting of removable media is not overridden | make lockfile"
        ansible.builtin.template:
            src: etc/dconf/db/00-automount_lock.j2
            dest: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d/locks/00-automount_lock"
            owner: root
            group: root
            mode: 0644
        notify: Update dconf
  when:
      -  cis_ubuntu2004_rule_1_8_7
      -  cis_ubuntu2004_desktop_required
  tags:
      - level1-server
      - level2-workstation
      - automated
      - patch
      - rule_1.8.7
      - gnome

- name: "SECTION1 | 1.8.8 | Ensure GDM autorun-never is enabled"
  block:
      - name: "SECTION1 | 1.8.8 | Ensure GDM autorun-never is enabled | make directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d"
            owner: root
            group: root
            mode: 0755
            state: directory
        notify: Update dconf

      - name: "SECTION1 | 1.8.8 | Ensure GDM autorun-never is enabled | session script"
        ansible.builtin.template:
            src: etc/dconf/db/00-media-autorun.j2
            dest: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d/00-media-autorun"
            owner: root
            group: root
            mode: '0644'
        notify: Update dconf
  when:
      -  cis_ubuntu2004_rule_1_8_8
      -  cis_ubuntu2004_desktop_required
  tags:
      - level1-server
      - level2-workstation
      - automated
      - patch
      - rule_1.8.8
      - gnome

- name: "SECTION1 | 1.8.9 | Ensure GDM autorun-never is not overridden"
  block:
      - name: "SECTION1 | 1.8.9 | Ensure GDM autorun-never is not overridden | make lock directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d/locks"
            owner: root
            group: root
            mode: 0755
            state: directory
        notify: Update dconf

      - name: "SECTION1 | 1.8.9 | Ensure GDM autorun-never is not overridden | make lockfile"
        ansible.builtin.template:
            src: etc/dconf/db/00-autorun_lock.j2
            dest: "/etc/dconf/db/{{  cis_ubuntu2004_dconf_db_name }}.d/locks/00-autorun_lock"
            owner: root
            group: root
            mode: 0644
        notify: Update dconf
  when:
      -  cis_ubuntu2004_rule_1_8_9
      -  cis_ubuntu2004_desktop_required
  tags:
      - level1-server
      - level2-workstation
      - automated
      - patch
      - rule_1.8.9
      - gnome

- name: "SECTION1 | 1.8.10 | Ensure XDCMP is not enabled"
  ansible.builtin.lineinfile:
      path: /etc/gdm3/custom.conf
      regexp: '^Enable.*=.*true'
      state: absent
  when:
      -  cis_ubuntu2004_rule_1_8_10
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.8.10
      - gnome
      - xdcmp
