---
# tasks file for ansible-cis-ubuntu-2204

# ------------------------------------------------------------------------------

- name: "SECTION 3 | 3.1.1 | Disable IPv6"
  block:
      - name: "SECTION 3 | 3.1.1 | AUDIT | Disable IPv6 | Get current GRUB_CMDLINE_LINUX settings"
        ansible.builtin.shell: grep "GRUB_CMDLINE_LINUX=" /etc/default/grub | cut -f2 -d'"'
        changed_when: false
        failed_when: false
        check_mode: false
        register: cis_ubuntu2004_3_1_1_grub_cmdline_linux_settings

      - name: "SECTION 3 | 3.1.1 | Disable IPv6 | Add ipv6.disable if does not exist"
        ansible.builtin.lineinfile:
            path: /etc/default/grub
            regexp: '^GRUB_CMDLINE_LINUX'
            line: 'GRUB_CMDLINE_LINUX="{{ cis_ubuntu2004_3_1_1_grub_cmdline_linux_settings.stdout }} ipv6.disable=1"'
        when: "'ipv6.disable' not in cis_ubuntu2004_3_1_1_grub_cmdline_linux_settings.stdout"
        notify: Grub update

      - name: "SECTION 3 | 3.1.1 | Disable IPv6 | Set ipv6.disable to 1 if exists"
        ansible.builtin.replace:
            path: /etc/default/grub
            regexp: 'ipv6\.disable=.'
            replace: 'ipv6.disable=1'
        when: "'ipv6.disable' in cis_ubuntu2004_3_1_1_grub_cmdline_linux_settings.stdout"
        notify: Grub update

      - name: "SECTION 3 | 3.1.1 | Disable IPv6 | Remove net.ipv6.conf.all.disable_ipv6"
        ansible.builtin.lineinfile:
            path: /etc/sysctl.conf
            regexp: '^net.ipv6.conf.all.disable_ipv6.*'
            state: absent
  when:
      - cis_ubuntu2004_rule_3_1_1
      - not cis_ubuntu2004_ipv6_required
  tags:
      - level2-server
      - level2-workstation
      - manual
      - patch
      - rule_3.1.1
      - ipv6

- name: "SECTION 3 | 3.1.2 | Ensure wireless interfaces are disabled"
  block:
      - name: "SECTION 3 | 3.1.2 | Ensure wireless interfaces are disabled | Check for wifi status "
        ansible.builtin.shell: nmcli radio wifi
        changed_when: false
        failed_when: false
        check_mode: false
        register: cis_ubuntu2004_3_1_2_wifi_status
        when:
            - cis_ubuntu2004_install_network_manager

      - name: "SECTION 3 | 3.1.2 | Ensure wireless interfaces are disabled | Disable wireless if enabled nmcli"
        ansible.builtin.shell: nmcli radio all off
        changed_when: cis_ubuntu2004_3_1_2_nmcli_radio_off.rc == 0
        register: cis_ubuntu2004_3_1_2_nmcli_radio_off
        when:
            - cis_ubuntu2004_install_network_manager
            - cis_ubuntu2004_3_1_2_wifi_status.stdout == 'enabled'

      - name: "SECTION 3 | 3.1.2 | Ensure wireless interfaces are disabled | disable driver"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/disable_wireless.conf
            regexp: 'install\s*{{ item }}\s*/bin/true'
            line: "install {{ item.line }} /bin/true"
            create: true
        loop:
            - "{{ wireless_interfaces.stdout_lines }}"

      - name: "SECTION 3 | 3.1.2 | Ensure wireless interfaces are not loadable | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: 'blacklist\s*{{ item }}\s*'
            line: "blacklist {{ item.line }}"
            create: true
        loop:
            - "{{ wireless_interfaces.stdout_lines }}"

  when:
      - cis_ubuntu2004_rule_3_1_2
      - wireless_interfaces.stdout | length > 0
  tags:
      - level1-server
      - level2-workstation
      - automated
      - patch
      - rule_3.1.2
      - wireless

- name: "SECTION 3 | 3.1.3 | Ensure bluetooth is disabled"
  ansible.builtin.systemd:
      name: bluetooth.service
      state: stopped
      enabled: false
      masked: true
  when:
      - cis_ubuntu2004_rule_3_1_3
      - "'bluetooth' in ansible_facts.packages"
  tags:
      - level1-server
      - automated
      - patch
      - rule_3.1.3
      - bluetooth

- name: "SECTION 3 | 3.1.4 | Ensure DCCP is disabled"
  block:
      - name: "SECTION 3 | 3.1.4 | Ensure DCCP is disabled | modprobe"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/dccp.conf
            regexp: '^(#)?install dccp(\\s|$)'
            line: 'install dccp /bin/true'
            create: true

      - name: "SECTION 3 | 3.1.4 | Ensure DCCP is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: '^(#)?blacklist dccp(\\s|$)'
            line: 'blacklist dccp'
            create: true
  when:
      - cis_ubuntu2004_rule_3_1_4
  tags:
      - level2-server
      - level2-workstation
      - automated
      - patch
      - rule_3.1.4
      - dccp

- name: "SECTION 3 | 3.1.5 | Ensure SCTP is disabled"
  block:
      - name: "SECTION 3 | 3.1.5 | Ensure SCTP is disabled | modprobe"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/sctp.conf
            regexp: "^(#)?install sctp(\\s|$)"
            line: 'install sctp /bin/true'
            create: true

      - name: "SECTION 3 | 3.1.5 | Ensure SCTP is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist sctp(\\s|$)"
            line: 'blacklist sctp'
            create: true

  when:
      - cis_ubuntu2004_rule_3_1_5
  tags:
      - level2-server
      - level2-workstation
      - automated
      - patch
      - rule_3.1.5
      - sctp

- name: "SECTION 3 | 3.1.6 | Ensure RDS is disabled"
  block:
      - name: "SECTION 3 | 3.1.6 | Ensure RDS is disabled | modprobe"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/rds.conf
            regexp: '^(#)?install rds(\\s|$)'
            line: 'install rds /bin/true'
            create: true

      - name: "SECTION 3 | 3.1.6 | Ensure RDS is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist rds(\\s|$)"
            line: 'blacklist rds'
            create: true
  when:
      - cis_ubuntu2004_rule_3_1_6
  tags:
      - level2-server
      - level2-workstation
      - automated
      - patch
      - rule_3.1.6
      - rds

- name: "SECTION 3 | 3.1.7 | Ensure TIPC is disabled"
  block:
      - name: "SECTION 3 | 3.1.7 | Ensure TIPC is disabled | modprobe"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/tipc.conf
            regexp: '^(#)?install tipc(\\s|$)'
            line: install tipc /bin/true
            create: true

      - name: "SECTION 3 | 3.1.7 | Ensure TIPC is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist tipc(\\s|$)"
            line: 'blacklist tipc'
            create: true
  when:
      - cis_ubuntu2004_rule_3_1_7
  tags:
      - level2-server
      - level2-workstation
      - automated
      - patch
      - rule_3.1.7
      - tipc

# ------------------------------------------------------------------------------

- name: "SECTION 3 | 3.2.1 | Ensure packet redirect sending is disabled"
  ansible.posix.sysctl:
      name: "{{ item }}"
      value: '0'
      sysctl_set: true
      state: present
      reload: true
      ignoreerrors: true
  with_items:
      - net.ipv4.conf.all.send_redirects
      - net.ipv4.conf.default.send_redirects
  notify: sysctl flush ipv4 route table
  when:
      - cis_ubuntu2004_rule_3_2_1
      - not cis_ubuntu2004_is_router
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.2.1
      - packet_redirect
      - sysctl

- name: "SECTION 3 | 3.2.2 | Ensure IP forwarding is disabled"
  block:
      - name: "SECTION 3 | 3.2.2 | Ensure IP forwarding is disabled | IPv4 settings"
        ansible.posix.sysctl:
            name: net.ipv4.ip_forward
            value: '0'
            sysctl_set: true
            state: present
            reload: true
            ignoreerrors: true
        notify:
            - sysctl flush ipv4 route table

      - name: "SECTION 3 | 3.2.2 | Ensure IP forwarding is disabled | IPv6 settings"
        ansible.posix.sysctl:
            name: net.ipv6.conf.all.forwarding
            value: '0'
            sysctl_set: true
            state: present
            reload: true
            ignoreerrors: true
        notify:
            - sysctl flush ipv6 route table
        when: cis_ubuntu2004_ipv6_required
  when:
      - cis_ubuntu2004_rule_3_2_2
      - not cis_ubuntu2004_is_router
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.2.2
      - ip_forwarding
      - sysctl

# ------------------------------------------------------------------------------

- name: "SECTION 3 | 3.3.1 | Ensure source routed packets are not accepted"
  block:
      - name: "SECTION 3 | 3.3.1 | Ensure source routed packets are not accepted | IPv4 settings"
        ansible.posix.sysctl:
            name: "{{ item }}"
            value: '0'
            sysctl_set: true
            state: present
            reload: true
            ignoreerrors: true
        with_items:
            - net.ipv4.conf.all.accept_source_route
            - net.ipv4.conf.default.accept_source_route
        notify: sysctl flush ipv4 route table

      - name: "3.3.1 | Ensure source routed packets are not accepted | IPv6 settings"
        ansible.posix.sysctl:
            name: "{{ item }}"
            value: '0'
            sysctl_set: true
            state: present
            reload: true
            ignoreerrors: true
        with_items:
            - net.ipv6.conf.all.accept_source_route
            - net.ipv6.conf.default.accept_source_route
        notify: sysctl flush ipv6 route table
        when: cis_ubuntu2004_ipv6_required
  when:
      - cis_ubuntu2004_rule_3_3_1
      - not cis_ubuntu2004_is_router
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.3.1
      - routed_packets
      - sysctl

- name: "SECTION 3 | 3.3.2 | Ensure ICMP redirects are not accepted"
  block:
      - name: "SECTION 3 | 3.3.2 | Ensure ICMP redirects are not accepted | IPv4 settings"
        ansible.posix.sysctl:
            name: "{{ item }}"
            value: '0'
            sysctl_set: true
            state: present
            reload: true
            ignoreerrors: true
        with_items:
            - net.ipv4.conf.all.accept_redirects
            - net.ipv4.conf.default.accept_redirects
        notify: sysctl flush ipv4 route table

      - name: "SECTION 3 | 3.3.2 | Ensure ICMP redirects are not accepted | IPv6 settings"
        ansible.posix.sysctl:
            name: "{{ item }}"
            value: '0'
            sysctl_set: true
            state: present
            reload: true
            ignoreerrors: true
        with_items:
            - net.ipv6.conf.all.accept_redirects
            - net.ipv6.conf.default.accept_redirects
        notify: sysctl flush ipv6 route table
        when: cis_ubuntu2004_ipv6_required
  when:
      - cis_ubuntu2004_rule_3_3_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.3.2
      - icmp
      - sysctl

- name: "SECTION 3 | 3.3.3 | Ensure secure ICMP redirects are not accepted"
  ansible.posix.sysctl:
      name: "{{ item }}"
      value: '0'
      sysctl_set: true
      state: present
      reload: true
      ignoreerrors: true
  with_items:
      - net.ipv4.conf.all.secure_redirects
      - net.ipv4.conf.default.secure_redirects
  notify: sysctl flush ipv4 route table
  when:
      - cis_ubuntu2004_rule_3_3_3
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.3.3
      - icmp
      - sysctl

- name: "SECTION 3 | 3.3.4 | Ensure suspicious packets are logged"
  ansible.posix.sysctl:
      name: "{{ item }}"
      value: '1'
      sysctl_set: true
      state: present
      reload: true
      ignoreerrors: true
  with_items:
      - net.ipv4.conf.all.log_martians
      - net.ipv4.conf.default.log_martians
  notify: sysctl flush ipv4 route table
  when:
      - cis_ubuntu2004_rule_3_3_4
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.3.4
      - suspicious_packets
      - sysctl

- name: "SECTION 3 | 3.3.5 | Ensure broadcast ICMP requests are ignored"
  ansible.posix.sysctl:
      name: net.ipv4.icmp_echo_ignore_broadcasts
      value: '1'
      sysctl_set: true
      state: present
      reload: true
      ignoreerrors: true
  notify: sysctl flush ipv4 route table
  when:
      - cis_ubuntu2004_rule_3_3_5
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.3.5
      - icmp
      - sysctl

- name: "SECTION 3 | 3.3.6 | Ensure bogus ICMP responses are ignored"
  ansible.posix.sysctl:
      name: net.ipv4.icmp_ignore_bogus_error_responses
      value: '1'
      sysctl_set: true
      state: present
      reload: true
      ignoreerrors: true
  notify: sysctl flush ipv4 route table
  when:
      - cis_ubuntu2004_rule_3_3_6
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.3.6
      - icmp
      - sysctl

- name: "SECTION 3 | 3.3.7 | Ensure Reverse Path Filtering is enabled"
  ansible.posix.sysctl:
      name: "{{ item }}"
      value: '1'
      sysctl_set: true
      state: present
      reload: true
      ignoreerrors: true
  with_items:
      - net.ipv4.conf.all.rp_filter
      - net.ipv4.conf.default.rp_filter
  notify: sysctl flush ipv4 route table
  when:
      - cis_ubuntu2004_rule_3_3_7
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.3.7
      - reverse_path_filtering
      - sysctl

- name: "SECTION 3 | 3.3.8 | Ensure TCP SYN Cookies is enabled"
  ansible.posix.sysctl:
      name: net.ipv4.tcp_syncookies
      value: '1'
      sysctl_set: true
      state: present
      reload: true
      ignoreerrors: true
  notify: sysctl flush ipv4 route table
  when:
      - cis_ubuntu2004_rule_3_3_8
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.3.8
      - tcp_syn_cookies
      - sysctl

- name: "SECTION 3 | 3.3.9 | Ensure IPv6 router advertisements are not accepted"
  ansible.posix.sysctl:
      name: "{{ item }}"
      value: '0'
      sysctl_set: true
      state: present
      reload: true
      ignoreerrors: true
  with_items:
      - net.ipv6.conf.all.accept_ra
      - net.ipv6.conf.default.accept_ra
  notify: sysctl flush ipv6 route table
  when:
      - cis_ubuntu2004_rule_3_3_9
      - cis_ubuntu2004_ipv6_required
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.3.9
      - ipv6
      - router_advertisements
      - sysctl

# ------------------------------------------------------------------------------

- name: "SECTION 3 | 3.4.1.1 | Ensure ufw is installed"
  ansible.builtin.package:
      name: ufw
      state: present
  when:
      - cis_ubuntu2004_rule_3_4_1_1
      - cis_ubuntu2004_firewall_package == "ufw"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.1.1
      - apt
      - ufw

- name: "SECTION 3 | 3.4.1.2 | Ensure iptables-persistent is not installed with ufw"
  ansible.builtin.package:
      name: iptables-persistent
      state: absent
  when:
      - cis_ubuntu2004_rule_3_4_1_2
      - cis_ubuntu2004_firewall_package == "ufw"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.1.2
      - ufw

# Adding the allow OpenSSH rule while enabling ufw to allow ansible to run after enabling
- name: "SECTION 3 | 3.4.1.3 | Ensure ufw service is enabled"
  community.general.ufw:
      rule: allow
      name: OpenSSH
      state: enabled
  when:
      - cis_ubuntu2004_rule_3_4_1_3
      - cis_ubuntu2004_firewall_package == "ufw"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.1.3
      - ufw

- name: "SECTION 3 | 3.4.1.4 | Ensure loopback traffic is configured"
  block:
      - name: "SECTION 3 | 3.4.1.4 | Ensure loopback traffic is configured | Set allow in ufw rules"
        community.general.ufw:
            rule: allow
            direction: in
            interface: lo
        notify: reload ufw

      - name: "SECTION 3 | 3.4.1.4 | Ensure loopback traffic is configured | Set allow out ufw rules"
        community.general.ufw:
            rule: allow
            direction: out
            interface: lo
        notify: reload ufw

      - name: "SECTION 3 | 3.4.1.4 | Ensure loopback traffic is configured | Set deny ufw rules IPv4"
        community.general.ufw:
            rule: deny
            direction: in
            from_ip: 127.0.0.0/8
        notify: reload ufw

      - name: "SECTION 3 | 3.4.1.4 | Ensure loopback traffic is configured | Set deny ufw rules IPv6"
        community.general.ufw:
            rule: deny
            direction: in
            from_ip: "::1"
        notify: reload ufw
        when: cis_ubuntu2004_ipv6_required
  when:
      - cis_ubuntu2004_rule_3_4_1_4
      - cis_ubuntu2004_firewall_package == "ufw"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.1.4
      - ufw

- name: "SECTION 3 | 3.4.1.5 | Ensure ufw outbound connections are configured"
  block:
      - name: "3.4.1.5 | Ensure ufw outbound connections are configured | Custom ports"
        community.general.ufw:
            rule: allow
            direction: out
            to_port: '{{ item }}'
        with_items:
            - "{{ cis_ubuntu2004_ufw_allow_out_ports }}"
        notify: reload ufw
        when: cis_ubuntu2004_ufw_allow_out_ports != "all"

      - name: "3.4.1.5 | Ensure ufw outbound connections are configured | Allow all"
        community.general.ufw:
            rule: allow
            direction: out
        notify: reload ufw
        when: "'all' in cis_ubuntu2004_ufw_allow_out_ports"
  when:
      - cis_ubuntu2004_rule_3_4_1_5
      - cis_ubuntu2004_firewall_package == "ufw"
  tags:
      - level1-server
      - level1-workstation
      - manual
      - patch
      - rule_3.4.1.5
      - ufw

- name: "SECTION 3 | 3.4.1.6 | AUDIT | Ensure ufw firewall rules exist for all open ports"
  block:
      - name: "SECTION 3 | 3.4.1.6 | AUDIT | Ensure ufw firewall rules exist for all open ports | Get list of open ports"
        ansible.builtin.shell: ss -4tuln
        changed_when: false
        failed_when: false
        check_mode: false
        register: cis_ubuntu2004_3_4_1_6_open_listen_ports

      - name: "SECTION 3 | 3.4.1.6 | AUDIT | Ensure ufw firewall rules exist for all open ports | Get list of firewall rules"
        ansible.builtin.shell: ufw status
        changed_when: false
        failed_when: false
        check_mode: false
        register: cis_ubuntu2004_3_4_1_6_firewall_rules

      - name: "SECTION 3 | 3.4.1.6 | AUDIT | Ensure ufw firewall rules exist for all open ports | Message out settings"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below are the listening ports and firewall rules"
                - "Please create firewall rule for any open ports if not already done"
                - "*****---Open Listen Ports---*****"
                - "{{ cis_ubuntu2004_3_4_1_6_open_listen_ports.stdout_lines }}"
                - "*****---Firewall Rules---*****"
                - "{{ cis_ubuntu2004_3_4_1_6_firewall_rules.stdout_lines }}"

      - name: "SECTION 3 | 3.4.1.6 | AUDIT | Ensure ufw firewall rules exist for all open ports | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '3.4.1.6'

  when:
      - cis_ubuntu2004_rule_3_4_1_6
      - cis_ubuntu2004_firewall_package == "ufw"
  tags:
      - level1-server
      - level1-workstation
      - manual
      - audit
      - rule_3.4.1.6
      - ufw

- name: "SECTION 3 | OPTIONAL | UFW incoming ports"
  community.general.ufw:
      rule: allow
      direction: in
      from_ip: '{{ item.from }}'
      to_port: '{{ item.port }}'
      proto: '{{ item.proto }}'
  loop: "{{ cis_ubuntu2004_ufw_allow_in }}"
  loop_control:
      label: "{{ item.port }}"
  notify: reload ufw
  when: ufw_add_incoming
  tags:
      - ufw
      - ufw_in_ports

- name: "SECTION 3 | 3.4.1.7 | Ensure ufw default deny firewall policy"
  community.general.ufw:
      default: deny
      direction: "{{ item }}"
  notify: reload ufw
  with_items:
      - incoming
      - outgoing
      - routed
  when:
      - cis_ubuntu2004_rule_3_4_1_7
      - cis_ubuntu2004_firewall_package == "ufw"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.1.7
      - ufw

# ------------------------------------------------------------------------------

# NFTables is unsupported with this role. However we have the actions commented out as a guide
# ---------------
# ---------------

- name: "SECTION 3 | 3.4.2.1 | AUDIT | Ensure nftables is installed"
  ansible.builtin.package:
      name: nftables
      state: present
  when:
      - cis_ubuntu2004_rule_3_4_2_1
      - cis_ubuntu2004_firewall_package == "nftables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_3.4.2.1
      - nftables

- name: "SECTION 3 | 3.4.2.2 | AUDIT | Ensure ufw is uninstalled or disabled with nftables"
  ansible.builtin.package:
      name: ufw
      state: absent
  when:
      - cis_ubuntu2004_rule_3_4_2_2
      - cis_ubuntu2004_firewall_package == "nftables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_3.4.2.2
      - nftables

- name: "SECTION 3 | 3.4.2.3 | AUDIT | Ensure iptables are flushed with nftables"
  block:
      - name: "SECTION 3 | 3.4.2.3 | AUDIT | Ensure iptables are flushed with nftables"
        ansible.builtin.debug:
            msg: "Warning!! NFTables is not supported in this role. Please use UFW, iptables, or manually manage nftables"

      - name: "SECTION 3 | 3.4.2.3 | AUDIT | Ensure iptables are flushed with nftables | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '3.4.2.3'
  when:
      - cis_ubuntu2004_rule_3_4_2_3
      - cis_ubuntu2004_firewall_package == "nftables"
  tags:
      - level1-server
      - level1-workstation
      - manual
      - audit
      - rule_3.4.2.3
      - nftables

- name: "SECTION 3 | 3.4.2.4 | AUDIT | Ensure a nftables table exists"
  block:
      - name: "SECTION 3 | 3.4.2.4 | AUDIT | Ensure a nftables table exists"
        ansible.builtin.debug:
            msg: "Warning!! NFTables is not supported in this role. Please use UFW, iptables, or manually manage nftables"

      - name: "SECTION 3 | 3.4.2.4 | AUDIT | Ensure a nftables table exists | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '3.4.2.4'
  when:
      - cis_ubuntu2004_rule_3_4_2_4
      - cis_ubuntu2004_firewall_package == "nftables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.2.4
      - nftables

- name: "SECTION 3 | 3.4.2.5 | AUDIT | Ensure nftables base chains exist"
  block:
      - name: "SECTION 3 | 3.4.2.5 | AUDIT | Ensure nftables base chains exist"
        ansible.builtin.debug:
            msg: "Warning!! NFTables is not supported in this role. Please use UFW, iptables, or manually manage nftables"

      - name: "SECTION 3 | 3.4.2.5 | AUDIT | Ensure nftables base chains exist | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '3.4.2.5'
  when:
      - cis_ubuntu2004_rule_3_4_2_5
      - cis_ubuntu2004_firewall_package == "nftables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_3.4.2.5
      - nftables

- name: "SECTION 3 | 3.4.2.6 | AUDIT | Ensure nftables loopback traffic is configured"
  block:
      - name: "SECTION 3 | 3.4.2.6 | AUDIT | Ensure nftables loopback traffic is configured"
        ansible.builtin.debug:
            msg: "Warning!! NFTables is not supported in this role. Please use UFW, iptables, or manually manage nftables"

      - name: "SECTION 3 | 3.4.2.6 | AUDIT | Ensure nftables loopback traffic is configured | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '3.4.2.6'
  when:
      - cis_ubuntu2004_rule_3_4_2_6
      - cis_ubuntu2004_firewall_package == "nftables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_3.4.2.6
      - nftables

- name: "SECTION 3 | 3.4.2.7 | AUDIT | Ensure nftables outbound and established connections are configured"
  block:
      - name: "SECTION 3 | 3.4.2.7 | AUDIT | Ensure nftables outbound and established connections are configured"
        ansible.builtin.debug:
            msg: "Warning!! NFTables is not supported in this role. Please use UFW, iptables, or manually manage nftables"

      - name: "3.4.2.7 | AUDIT | Ensure nftables outbound and established connections are configured | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '3.4.2.7'
  when:
      - cis_ubuntu2004_rule_3_4_2_7
      - cis_ubuntu2004_firewall_package == "nftables"
  tags:
      - level1-server
      - level1-workstation
      - manual
      - audit
      - rule_3.4.2.7
      - nftables

- name: "SECTION 3 | 3.4.2.8 | AUDIT | Ensure nftables default deny firewall policy"
  block:
      - name: "SECTION 3 | 3.4.2.8 | AUDIT | Ensure nftables default deny firewall policy"
        ansible.builtin.debug:
            msg: "Warning!! NFTables is not supported in this role. Please use UFW, iptables, or manually manage nftables"

      - name: "SECTION 3 | 3.4.2.8 | AUDIT | Ensure nftables default deny firewall policy | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '3.4.2.8'
  when:
      - cis_ubuntu2004_rule_3_4_2_8
      - cis_ubuntu2004_firewall_package == "nftables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_3.4.2.8
      - nftables

- name: "SECTION 3 | 3.4.2.9 | AUDIT | Ensure nftables service is enabled"
  block:
      - name: "SECTION 3 | 3.4.2.9 | AUDIT | Ensure nftables service is enabled"
        ansible.builtin.debug:
            msg: "Warning!! NFTables is not supported in this role. Please use UFW, iptables, or manually manage nftables"

      - name: "SECTION 3 | 3.4.2.9 | AUDIT | Ensure nftables service is enabled | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '3.4.2.9'
  when:
      - cis_ubuntu2004_rule_3_4_2_9
      - cis_ubuntu2004_firewall_package == "nftables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_3.4.2.9
      - nftables

- name: "SECTION 3 | 3.4.2.10 | AUDIT | Ensure nftables rules are permanent"
  block:
      - name: "SECTION 3 | 3.4.2.10 | AUDIT | Ensure nftables rules are permanent"
        ansible.builtin.debug:
            msg: "Warning!! NFTables is not supported in this role. Please use UFW, iptables, or manually manage nftables"

      - name: "SECTION 3 | 3.4.2.10 | AUDIT | Ensure nftables rules are permanent | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '3.4.2.10'
  when:
      - cis_ubuntu2004_rule_3_4_2_10
      - cis_ubuntu2004_firewall_package == "nftables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_3.4.2.10
      - nftables

# ------------------------------------------------------------------------------

- name: "SECTION 3 | 3.4.3.1.1 | Ensure iptables packages are installed"
  ansible.builtin.package:
      name: ['iptables', 'iptables-persistent']
      state: present
  when:
      - cis_ubuntu2004_rule_3_4_3_1_1
      - cis_ubuntu2004_firewall_package == "iptables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.3.1.1
      - iptables

- name: "SECTION 3 | 3.4.3.1.2 | Ensure nftables is not installed with iptables"
  ansible.builtin.package:
      name: nftables
      state: absent
  when:
      - cis_ubuntu2004_rule_3_4_3_1_2
      - cis_ubuntu2004_firewall_package == "iptables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.3.1.2
      - iptables

- name: "SECTION 3 | 3.4.3.1.3 | Ensure ufw is uninstalled or disabled with iptables"
  ansible.builtin.package:
      name: ufw
      state: absent
  when:
      - cis_ubuntu2004_rule_3_4_3_1_3
      - cis_ubuntu2004_firewall_package == "iptables"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.3.1.3
      - iptables

# iptables ipv4

- name: "SECTION 3 | 3.4.3.2.1 | Ensure iptables default deny firewall policy"
  block:
      - name: "SECTION 3 | 3.4.3.2.1 | Ensure iptables default deny firewall policy | Configure SSH to be allowed in"
        ansible.builtin.iptables:
            chain: INPUT
            protocol: tcp
            destination_port: 22
            jump: ACCEPT
            ctstate: 'NEW,ESTABLISHED'
        notify: persistent ip4tables

      - name: "SECTION 3 | 3.4.3.2.1 | Ensure iptables default deny firewall policy | Configure SSH to be allowed out"
        ansible.builtin.iptables:
            chain: OUTPUT
            protocol: tcp
            source_port: 22
            jump: ACCEPT
            ctstate: 'NEW,ESTABLISHED'
        notify: persistent ip4tables

      - name: "SECTION 3 | 3.4.3.2.1 | Ensure iptables default deny firewall policy | Enable apt traffic"
        ansible.builtin.iptables:
            chain: INPUT
            ctstate: 'ESTABLISHED'
            jump: ACCEPT
        notify: persistent ip4tables

      - name: "SECTION 3 | 3.4.3.2.1 | Ensure iptables default deny firewall policy | Set drop items"
        ansible.builtin.iptables:
            policy: DROP
            chain: "{{ item }}"
        with_items:
            - INPUT
            - FORWARD
            - OUTPUT
        notify: persistent ip4tables
  when:
      - cis_ubuntu2004_rule_3_4_3_2_1
      - cis_ubuntu2004_firewall_package == "iptables"
      - cis_ubuntu2004_ipv4_required
      - not system_is_ec2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.3.2.1
      - iptables

- name: "SECTION 3 | 3.4.3.2.2 | Ensure iptables loopback traffic is configured"
  block:
      - name: "3.4.3.2.2 | Ensure iptables loopback traffic is configured | INPUT loopback ACCEPT"
        ansible.builtin.iptables:
            action: append
            chain: INPUT
            in_interface: lo
            jump: ACCEPT
        notify: persistent ip4tables

      - name: "3.4.3.2.2 | Ensure iptables loopback traffic is configured | OUTPUT loopback ACCEPT"
        ansible.builtin.iptables:
            action: append
            chain: OUTPUT
            out_interface: lo
            jump: ACCEPT
        notify: persistent ip4tables

      - name: "3.4.3.2.2 | Ensure iptables loopback traffic is configured | OUTPUT loopback ACCEPT"
        ansible.builtin.iptables:
            action: append
            chain: INPUT
            source: 127.0.0.0/8
            jump: DROP
        notify: persistent ip4tables
  when:
      - cis_ubuntu2004_rule_3_4_3_2_2
      - cis_ubuntu2004_firewall_package == "iptables"
      - cis_ubuntu2004_ipv4_required
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.3.2.2
      - iptables

- name: "SECTION 3 | 3.4.3.2.3 | Ensure iptables outbound and established connections are configured"
  ansible.builtin.iptables:
      action: append
      chain: '{{ item.chain }}'
      protocol: '{{ item.protocol }}'
      match: state
      ctstate: '{{ item.ctstate }}'
      jump: ACCEPT
  with_items:
      - { chain: OUTPUT, protocol: tcp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: OUTPUT, protocol: udp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: OUTPUT, protocol: icmp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: INPUT, protocol: tcp, ctstate: 'ESTABLISHED' }
      - { chain: INPUT, protocol: udp, ctstate: 'ESTABLISHED' }
      - { chain: INPUT, protocol: icmp, ctstate: 'ESTABLISHED' }
  notify: persistent ip4tables
  when:
      - cis_ubuntu2004_rule_3_4_3_2_3
      - cis_ubuntu2004_firewall_package == "iptables"
      - cis_ubuntu2004_ipv4_required
  tags:
      - level1-server
      - level1-workstation
      - manual
      - patch
      - rule_3.4.3.2.3
      - iptables

- name: "SECTION 3 | 3.4.3.2.4 | AUDIT | Ensure iptables firewall rules exist for all open ports"
  block:
      - name: "SECTION 3 | 3.4.3.2.4 | AUDIT | Ensure iptables firewall rules exist for all open ports | Get list of open ports"
        ansible.builtin.shell: ss -4tuln
        changed_when: false
        failed_when: false
        check_mode: false
        register: cis_ubuntu2004_3_4_3_2_4_open_ports
        notify: persistent ip4tables

      - name: "SECTION 3 | 3.4.3.2.4 | AUDIT | Ensure iptables firewall rules exist for all open ports | Get list of rules"
        ansible.builtin.shell: iptables -L INPUT -v -n
        changed_when: false
        failed_when: false
        check_mode: false
        register: cis_ubuntu2004_3_4_3_2_4_current_rules
        notify: persistent ip4tables

      - name: "SECTION 3 | 3.4.3.2.4 | AUDIT | Ensure iptables firewall rules exist for all open ports | Alert about settings"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below is the list the open ports and current rules"
                - "Please create a rule for any open port that does not have a current rule"
                - "Open Ports:"
                - "{{ cis_ubuntu2004_3_4_3_2_4_open_ports.stdout_lines }}"
                - "Current Rules:"
                - "{{ cis_ubuntu2004_3_4_3_2_4_current_rules.stdout_lines }}"
        notify: persistent ip4tables
  when:
      - cis_ubuntu2004_rule_3_4_3_2_4
      - cis_ubuntu2004_firewall_package == "iptables"
      - cis_ubuntu2004_ipv4_required
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_3.4.3.2.4
      - iptables

# iptable ipv6

- name: "SECTION 3 | 3.4.3.3.1 | Ensure ip6tables default deny firewall policy"
  block:
      - name: "SECTION 3 | 3.4.3.3.1 | Ensure ip6tables default deny firewall policy | Configure SSH to be allowed out"
        ansible.builtin.iptables:
            chain: OUTPUT
            protocol: tcp
            source_port: 22
            jump: ACCEPT
            ctstate: 'NEW,ESTABLISHED'
            ip_version: ipv6

      - name: "SECTION 3 | 3.4.3.3.1 | Ensure ip6tables default deny firewall policy | Enable apt traffic"
        ansible.builtin.iptables:
            chain: INPUT
            ctstate: 'ESTABLISHED'
            jump: ACCEPT
            ip_version: ipv6

      - name: "SECTION 3 | 3.4.3.3.1 | Ensure ip6tables default deny firewall policy | Set drop items"
        ansible.builtin.iptables:
            policy: DROP
            chain: "{{ item }}"
            ip_version: ipv6
        with_items:
            - INPUT
            - FORWARD
            - OUTPUT
  when:
      - cis_ubuntu2004_rule_3_4_3_3_1
      - cis_ubuntu2004_firewall_package == "iptables"
      - cis_ubuntu2004_ipv6_required
      - not cis_ubuntu2004_ipv4_required
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.3.3.1
      - ip6tables

- name: "SECTION 3 | 3.4.3.3.2 | Ensure ip6tables loopback traffic is configured"
  block:
      - name: "SECTION 3 | 3.4.3.3.2 | Ensure ip6tables loopback traffic is configured | INPUT loopback ACCEPT"
        ansible.builtin.iptables:
            action: append
            chain: INPUT
            in_interface: lo
            jump: ACCEPT
            ip_version: ipv6

      - name: "SECTION 3 | 3.4.3.3.2 | Ensure ip6tables loopback traffic is configured | OUTPUT loopback ACCEPT"
        ansible.builtin.iptables:
            action: append
            chain: OUTPUT
            out_interface: lo
            jump: ACCEPT
            ip_version: ipv6

      - name: "SECTION 3 | 3.4.3.3.2 | Ensure ip6tables loopback traffic is configured | INPUT loopback drop"
        ansible.builtin.iptables:
            action: append
            chain: INPUT
            source: ::1
            jump: DROP
            ip_version: ipv6
  when:
      - cis_ubuntu2004_rule_3_4_3_3_2
      - cis_ubuntu2004_firewall_package == "iptables"
      - cis_ubuntu2004_ipv6_required
      - not cis_ubuntu2004_ipv4_required
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_3.4.3.3.2
      - ip6tables

- name: "SECTION 3 | 3.4.3.3.3 | Ensure ip6tables outbound and established connections are configured"
  ansible.builtin.iptables:
      action: append
      chain: '{{ item.chain }}'
      protocol: '{{ item.protocol }}'
      match: state
      ctstate: '{{ item.ctstate }}'
      jump: ACCEPT
      ip_version: ipv6
  with_items:
      - { chain: OUTPUT, protocol: tcp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: OUTPUT, protocol: udp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: OUTPUT, protocol: icmp, ctstate: 'NEW,ESTABLISHED' }
      - { chain: INPUT, protocol: tcp, ctstate: 'ESTABLISHED' }
      - { chain: INPUT, protocol: udp, ctstate: 'ESTABLISHED' }
      - { chain: INPUT, protocol: icmp, ctstate: 'ESTABLISHED' }
  when:
      - cis_ubuntu2004_rule_3_4_3_3_3
      - cis_ubuntu2004_firewall_package == "iptables"
      - cis_ubuntu2004_ipv6_required
      - not cis_ubuntu2004_ipv4_required
  tags:
      - level1-server
      - level1-workstation
      - manual
      - patch
      - rule_3.4.3.3.3
      - ip6tables

- name: "SECTION 3 | 3.4.3.3.4 | AUDIT | Ensure ip6tables firewall rules exist for all open ports"
  block:
      - name: "SECTION 3 | 3.4.3.3.4 | AUDIT | Ensure ip6tables firewall rules exist for all open ports | Get list of open ports"
        ansible.builtin.shell: ss -6tuln
        changed_when: false
        failed_when: false
        check_mode: false
        register: cis_ubuntu2004_3_4_3_3_4_open_ports

      - name: "SECTION 3 | 3.4.3.3.4 | AUDIT | Ensure ip6tables firewall rules exist for all open ports | Get list of rules"
        ansible.builtin.shell: ip6tables -L INPUT -v -n
        changed_when: false
        failed_when: false
        check_mode: false
        register: cis_ubuntu2004_3_4_3_3_4_current_rules

      - name: "SECTION 3 | 3.4.3.3.4 | AUDIT | Ensure ip6tables firewall rules exist for all open ports | Alert about settings"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below is the list the open ports and current rules"
                - "Please create a rule for any open port that does not have a current rule"
                - "Open Ports:"
                - "{{ cis_ubuntu2004_3_4_3_3_4_open_ports.stdout_lines }}"
                - "Current Rules:"
                - "{{ cis_ubuntu2004_3_4_3_3_4_current_rules.stdout_lines }}"

      - name: "SECTION 3 | 3.4.3.3.4 | AUDIT | Ensure ip6tables firewall rules exist for all open ports | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '3.4.3.3.4'
  when:
      - cis_ubuntu2004_rule_3_4_3_3_4
      - cis_ubuntu2004_firewall_package == "iptables"
      - cis_ubuntu2004_ipv6_required
      - not cis_ubuntu2004_ipv4_required
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_3.4.3.3.4
      - ip6tables

# ------------------------------------------------------------------------------


